
@{
    ViewData["Title"] = "Dashboard";

}

<style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #64748b;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --info-color: #06b6d4;
            --dark-color: #1e293b;
            --light-color: #f8fafc;
            --border-color: #e2e8f0;
            --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
        }

        body {
            font-family: "Roboto", sans-serif;
            background: #f5f5f5;
            color: #333;
        }

        canvas {
            display: block !important;
            max-width: 100%;
            height: auto;
        }

        .dashboard-container {
            margin: 20px;
            padding: 30px;
            min-height: calc(100vh - 40px);
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
            color: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="40" r="1.5" fill="rgba(255,255,255,0.1)"/><circle cx="40" cy="80" r="1" fill="rgba(255,255,255,0.1)"/></svg>');
            animation: float 20s ease-in-out infinite;
        }

        @@keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        .user-selector {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: var(--shadow);
        }

        .custom-select {
            position: relative;
            background: white;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            padding: 12px 16px;
            font-size: 16px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .custom-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            margin-bottom: 15px;
        }

        .icon-cash { background: linear-gradient(135deg, var(--success-color), #059669); }
        .icon-profit { background: linear-gradient(135deg, var(--info-color), #0891b2); }
        .icon-portfolio { background: linear-gradient(135deg, var(--warning-color), #d97706); }
        .icon-trades { background: linear-gradient(135deg, var(--danger-color), #dc2626); }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
            color: var(--dark-color);
        }

        .stat-label {
            color: var(--secondary-color);
            font-size: 14px;
            font-weight: 500;
        }

        .chart-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: var(--shadow);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .chart-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-color);
            margin: 0;
        }

        .chart-controls {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .chart-btn {
            padding: 8px 16px;
            border: 2px solid var(--border-color);
            background: white;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .chart-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .chart-btn:hover:not(.active) {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        @@media (max-width: 1200px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }

        .chart-container {
            position: relative;
            height: 400px;
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--shadow);
        }

        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 200px;
            color: var(--secondary-color);
        }

        .spinner {
            border: 3px solid var(--border-color);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .no-data {
            text-align: center;
            color: var(--secondary-color);
            padding: 50px 20px;
        }

        .no-data i {
            font-size: 48px;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        .performance-table {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: var(--shadow);
        }

        .table {
            margin: 0;
        }

        .table th {
            border-top: none;
            font-weight: 600;
            color: var(--dark-color);
            background: var(--light-color);
        }

        .pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }

        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-online { background: var(--success-color); }
        .status-offline { background: var(--secondary-color); }
    </style>

<!-- Portföy Dağılımı -->
<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="mb-1"><i class="fas fa-chart-line me-3"></i>Admin Dashboard</h1>
                <p class="mb-0 opacity-75">Real-time portfolio monitoring and analytics</p>
            </div>
            <div class="text-end">
                <div class="status-indicator status-online pulse"></div>
                <small>Live Data</small>
            </div>
        </div>
    </div>

    <!-- User Selection -->
    <div class="user-selector">
        <div class="row align-items-center">
            <div class="col-md-3">
                <label for="userSelect" class="form-label fw-semibold">
                    <i class="fas fa-user me-2"></i>Select User
                </label>
            </div>
            <div class="col-md-9">
                <select id="userSelect" class="form-control">
                    <option value="">Select a User</option>
                    @foreach (var user in ViewBag.Users)
                    {
                        <option value="@user.Id">@user.Email</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon icon-cash">
                <i class="fas fa-wallet"></i>
            </div>
            <div class="stat-value" id="cashAmount">$0.00</div>
            <div class="stat-label">Total Cash Balance</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon icon-profit">
                <i class="fas fa-chart-line"></i>
            </div>
            <div class="stat-value" id="profitLoss">$0.00</div>
            <div class="stat-label">Total Profit/Loss</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon icon-portfolio">
                <i class="fas fa-briefcase"></i>
            </div>
            <div class="stat-value" id="portfolioValue">$0.00</div>
            <div class="stat-label">Portfolio Value</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon icon-trades">
                <i class="fas fa-exchange-alt"></i>
            </div>
            <div class="stat-value" id="totalTrades">0</div>
            <div class="stat-label">Total Trades</div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="chart-section">
        <div class="chart-header">
            <h3 class="chart-title">Portfolio Analysis</h3>
            <div class="chart-controls">
                <button class="chart-btn active" data-chart="portfolio">
                    <i class="fas fa-chart-pie me-1"></i>Portfolio
                </button>
                <button class="chart-btn" data-chart="performance">
                    <i class="fas fa-chart-line me-1"></i>Performance
                </button>
                <button class="chart-btn" data-chart="allocation">
                    <i class="fas fa-chart-bar me-1"></i>Allocation
                </button>
            </div>
        </div>

        <div class="charts-grid">
            <div class="chart-container">
                <canvas id="mainChart"></canvas>
                
            </div>

            <div class="chart-container">
                <canvas id="secondaryChart"></canvas>
                
            </div>
        </div>
    </div>

    <!-- Performance Table -->
    <div class="performance-table">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="mb-0"><i class="fas fa-table me-2"></i>Portfolio Holdings</h4>
            <small class="text-muted">Last updated: <span id="lastUpdate">Never</span></small>
        </div>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Value</th>
                        <th>P&L</th>
                        <th>%Change</th>
                    </tr>
                </thead>
                <tbody id="holdingsTable">
                    <tr>
                        <td colspan="6" class="no-data">
                            <i class="fas fa-chart-pie"></i>
                            <p class="mb-0">Select a user to view portfolio holdings</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>


<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script type="text/javascript">
        $(function () {
            console.log("[INIT] Dashboard ready");

            // 1) Gerçek SignalR Hub bağlantısı
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/adminhub")
                .withAutomaticReconnect()
                .build();

            connection.start()
                .then(() => console.log("[SIGNALR] Connected to /adminhub"))
                .catch(err => console.error("[SIGNALR] Connection error:", err));

            let selectedUserId = null;
            let mainChart, secondaryChart;
            let currentChartType = 'portfolio';

            // 2) Grafikleri başlat
            initCharts();

            // 3) Kullanıcı seçimi
            $("#userSelect").on("change", function () {
                selectedUserId = $(this).val();
                if (!selectedUserId) {
                    resetDashboard();
                    return;
                }
                showLoading();
                connection.invoke("RequestUserDashboard", selectedUserId)
                    .catch(err => console.error(err));
            });

            // 4) Chart düğmeleri
            $(".chart-btn").on("click", function () {
                $(".chart-btn").removeClass("active");
                $(this).addClass("active");
                currentChartType = $(this).data("chart");
                if (selectedUserId) {
                    showLoading();
                    connection.invoke("RequestUserDashboard", selectedUserId);
                }
            });

            // 5) Sunucudan veri geldiğinde
            connection.on("ReceiveUserDashboard", data => {
                hideLoading();
                updateStats(data);
                updateCharts(data);
                updateHoldingsTable(data.portfolio);
                $("#lastUpdate").text(new Date().toLocaleTimeString());
            });

            // 6) Periyodik yenile (opsiyonel)
            setInterval(() => {
                if (selectedUserId) {
                    connection.invoke("RequestUserDashboard", selectedUserId)
                        .catch(err => console.error(err));
                }
            }, 5000);

            // ———————————————————————————————————————————
            // Fonksiyonlar
            function initCharts() {
                const mainCtx = document.getElementById("mainChart").getContext("2d");
                const secCtx = document.getElementById("secondaryChart").getContext("2d");

                // yalnızca bir kere oluşturuyoruz
                mainChart = new Chart(mainCtx, {
                    type: 'doughnut',
                    data: { labels: [], datasets: [{ data: [], backgroundColor: [] }] },
                    options: getChartOptions('doughnut')
                });

                secondaryChart = new Chart(secCtx, {
                    type: 'bar',
                    data: { labels: [], datasets: [{ data: [], backgroundColor: [] }] },
                    options: getChartOptions('bar')
                });
            }

            function updateCharts({ portfolio, trades }) {
                if (currentChartType === 'portfolio') {
                    const labels = portfolio.map(p => p.symbol);
                    const values = portfolio.map(p => p.value);
                    const colors = generateColors(labels.length);

                    // sadece data ve type güncelleniyor
                    mainChart.config.type = 'doughnut';
                    mainChart.data.labels = labels;
                    mainChart.data.datasets[0].data = values;
                    mainChart.data.datasets[0].backgroundColor = colors;
                    mainChart.options = getChartOptions('doughnut');
                    mainChart.update();

                    secondaryChart.config.type = 'bar';
                    secondaryChart.data.labels = labels;
                    secondaryChart.data.datasets[0].data = values;
                    secondaryChart.data.datasets[0].backgroundColor = colors;
                    secondaryChart.options = getChartOptions('bar');
                    secondaryChart.update();
                }
                else if (currentChartType === 'performance') {
                    // aynı şekilde sadece mevcut chart’ın içeriğini güncelleyip update()
                    // …
                }
            }

            function getChartOptions(type) {
                const base = {
                    responsive: true, maintainAspectRatio: false,
                    plugins: { legend: { position: 'bottom', labels: { usePointStyle: true } } }
                };
                if (type === 'doughnut') {
                    return {
                        ...base, cutout: '60%', plugins: {
                            ...base.plugins, tooltip: {
                                callbacks: {
                                    label(ctx) {
                                        const v = ctx.parsed, tot = ctx.dataset.data.reduce((a, b) => a + b, 0);
                                        return `${ctx.label}: $${v.toLocaleString()} (${(v / tot * 100).toFixed(1)}%)`;
                                    }
                                }
                            }
                        }
                    };
                }
                return { ...base, scales: { y: { beginAtZero: true }, x: {} } };
            }

            function updateStats({ cash, profitLoss, portfolio, trades }) {
                $("#cashAmount").text(`$${cash.toLocaleString(undefined, { minimumFractionDigits: 2 })}`);
                $("#profitLoss")
                    .text(`$${profitLoss.toLocaleString(undefined, { minimumFractionDigits: 2 })}`)
                    .toggleClass("text-success", profitLoss >= 0)
                    .toggleClass("text-danger", profitLoss < 0);
                const portValue = portfolio.reduce((s, i) => s + i.value, 0);
                $("#portfolioValue").text(`$${portValue.toLocaleString(undefined, { minimumFractionDigits: 2 })}`);
                $("#totalTrades").text(trades?.length ?? portfolio.length);
            }

            function updateCharts({ portfolio, trades }) {
                if (currentChartType === 'portfolio') {
                    const labels = portfolio.map(p => p.symbol);
                    const values = portfolio.map(p => p.value);
                    const colors = generateColors(labels.length);

                    // ana – doughnut
                    mainChart.config.type = 'doughnut';
                    mainChart.data.labels = labels;
                    mainChart.data.datasets = [{ data: values, backgroundColor: colors }];
                    mainChart.options = getChartOptions('doughnut');
                    mainChart.update();

                    // ikincil – bar
                    secondaryChart.config.type = 'bar';
                    secondaryChart.data.labels = labels;
                    secondaryChart.data.datasets = [{ label: 'Value', data: values, backgroundColor: colors }];
                    secondaryChart.options = getChartOptions('bar');
                    secondaryChart.update();
                }
                else if (currentChartType === 'performance') {
                    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
                    const perf = days.map((_, i) => trades[i]?.value ?? 0);
                    mainChart.config.type = 'line';
                    mainChart.data.labels = days;
                    mainChart.data.datasets = [{ label: 'Daily P/L', data: perf, borderColor: '#2563EB', fill: true, tension: 0.4 }];
                    mainChart.options = getChartOptions('line');
                    mainChart.update();

                    const cum = perf.reduce((a, v, i) => (a.push((a[i - 1] || 0) + v), a), []);
                    secondaryChart.config.type = 'line';
                    secondaryChart.data.labels = days;
                    secondaryChart.data.datasets = [{ label: 'Cumulative', data: cum, borderColor: '#10B981', fill: true, tension: 0.4 }];
                    secondaryChart.options = getChartOptions('line');
                    secondaryChart.update();
                }
                // allocation vb. ekleyebilirsiniz...
            }

            function updateHoldingsTable(portfolio) {
                const $t = $("#holdingsTable").empty();
                portfolio.forEach(h => {
                    $t.append(`
                  <tr>
                    <td>${h.symbol}</td>
                    <td>${h.quantity ?? ''}</td>
                    <td>$${(h.value / (h.quantity || 1)).toFixed(2)}</td>
                    <td>$${h.value.toLocaleString()}</td>
                    <td><span class="${h.pl >= 0 ? 'text-success' : 'text-danger'}">$${h.pl?.toFixed(2) || 0}</span></td>
                    <td><span class="${h.change >= 0 ? 'text-success' : 'text-danger'}">${h.change?.toFixed(2) || 0}%</span></td>
                  </tr>
                `);
                });
            }

            function generateColors(n) {
                const base = ['rgba(37,99,235,0.8)', 'rgba(16,185,129,0.8)', 'rgba(245,158,11,0.8)', 'rgba(239,68,68,0.8)', 'rgba(139,92,246,0.8)', 'rgba(6,182,212,0.8)'];
                return [...base, ...Array(n - base.length).fill().map((_, i) => `hsla(${i * 45 % 360},70%,60%,0.8)`)].slice(0, n);
            }

            function showLoading() {
                $("#loadingMain,#loadingSecondary").show();
                $("#mainChart,#secondaryChart").hide();
            }
            function hideLoading() {
                $("#loadingMain,#loadingSecondary").hide();
                $("#mainChart,#secondaryChart").show();
            }
            function resetDashboard() {
                // sıfırla…
                initCharts();
                $("#cashAmount,#profitLoss,#portfolioValue,#totalTrades").text("—");
                $("#holdingsTable").html(`<tr><td colspan="6" class="text-center text-muted">Select a user</td></tr>`);
            }
        });
    </script>
}